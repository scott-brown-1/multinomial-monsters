
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #########################
> ### Imports and setup ###
> #########################
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Dig deeper into tidy modeling with R at https://www.tmwr.org
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> setwd('..')
> source('./scripts/ggg_analysis.R')
> PARALLEL <- F
> 
> #########################
> ####### Load Data #######
> #########################
> 
> ## Load data
> train <- prep_df(vroom::vroom('./data/train.csv'))
Rows: 371 Columns: 7
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (2): color, type
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- prep_df(vroom::vroom('./data/test.csv'))
Rows: 529 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): color
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #########################
> ## Feature Engineering ## 
> #########################
> 
> set.seed(843)
> 
> ## parallel tune grid
> 
> if(PARALLEL){
+   cl <- makePSOCKcluster(10)
+   registerDoParallel(cl)
+ }
> 
> ## Set up preprocessing
> prepped_recipe <- setup_train_recipe(train, encode=T, 
+                                      pca_threshold=0, scale_to_unit = 1)
> 
> ## Bake recipe
> bake(prepped_recipe, new_data=train)
# A tibble: 371 × 6
   bone_length rotting_flesh hair_length has_soul color type  
         <dbl>         <dbl>       <dbl>    <dbl> <dbl> <fct> 
 1       0.388         0.305      0.383     0.833 0     Ghoul 
 2       0.681         0.395      0.459     0.465 0.419 Goblin
 3       0.538         0.309      0.782     0.844 0.351 Ghoul 
 4       0.947         0.494      0.580     0.945 0.351 Ghoul 
 5       0.668         0.932      0.328     0.677 0.419 Ghost 
 6       0.456         0.188      0.355     0.292 0.419 Goblin
 7       0.448         0.566      0.559     0.495 0.260 Goblin
 8       0.602         0.527      0.553     0.495 0     Ghoul 
 9       0.335         0.688      0.327     0.235 0.236 Ghost 
10       0.291         0.724      0.0520    0.142 0.260 Ghost 
# ℹ 361 more rows
> bake(prepped_recipe, new_data=test)
# A tibble: 529 × 5
   bone_length rotting_flesh hair_length has_soul color
         <dbl>         <dbl>       <dbl>    <dbl> <dbl>
 1       0.543         0.349       0.660    0.744 0.351
 2       0.485         0.656       0.498    0.477 0.260
 3       0.646         0.474       0.608    0.475 0.351
 4       0.763         0.702       0.389    0.375 0.260
 5       0.398         0.584       0.280    0.288 0.351
 6       0.307         0.490       0.189    0.105 0.260
 7       0.692         0.545       0.571    0.529 0.260
 8       0.562         0.434       0.605    0.600 0.236
 9       0.543         0.373       0.383    0.429 0.236
10       0.677         0.264       0.617    0.682 0    
# ℹ 519 more rows
> 
> #########################
> ## Fit Classifer Model ##
> #########################
> 
> ## Define model
> mlp_model <- mlp(
+   hidden_units = tune(),
+   epochs = 75, #or 100 or 2507
+   activation="relu"
+   ) %>%
+   #set_engine("nnet", verbose=0) %>%
+   set_engine("keras", verbose=0) %>%
+   set_mode('classification')
> 
> ## Define workflow
> mlp_wf <- workflow() %>%
+   add_recipe(prepped_recipe) %>%
+   add_model(mlp_model)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(
+   hidden_units(range=c(1, 30)),
+   levels = 5)
> 
> ## Split data for CV
> folds <- vfold_cv(train, v = 5, repeats=1)
> 
> ## Run the CV
> cv_results <- mlp_wf %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(accuracy))
2023-11-06 17:02:11.854673: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-11-06 17:02:14.474078: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 22ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 15ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 14ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 22ms/step
WARNING:tensorflow:5 out of the last 13 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f4f24535ab0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 17ms/step
WARNING:tensorflow:5 out of the last 13 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f4f047ea560> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 22ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 19ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 14ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 20ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 2ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 2ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 2ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 24ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 17ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 18ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 20ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 3ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 6ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 20ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 19ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 21ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 19ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 14ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 3ms/step
1/3 [=========>....................] - ETA: 0s3/3 [==============================] - 0s 2ms/step
> 
> ## Find optimal tuning params
> best_params <- cv_results %>%
+   select_best("accuracy")
> 
> print(best_params)
# A tibble: 1 × 2
  hidden_units .config             
         <int> <chr>               
1           22 Preprocessor1_Model4
> 
> hidden_unit_plot <- cv_results %>% 
+   collect_metrics() %>%
+   filter(.metric=="accuracy") %>%
+   ggplot(aes(x=hidden_units, y=mean)) + 
+   geom_line()
> 
> ggsave('hidden_unit_plot.png',plot=hidden_unit_plot)
Saving 7 x 7 in image
> 
> ## Fit workflow
> final_wf <- mlp_wf %>%
+   finalize_workflow(best_params) %>%
+   fit(data = train)
> 
> ## Predict new y
> output <- predict(final_wf, new_data=test, type='class') %>%
+   bind_cols(., test) %>%
+   rename(type=.pred_class) %>%
+   select(id, type)
 1/17 [>.............................] - ETA: 0s11/17 [==================>...........] - ETA: 0s17/17 [==============================] - 0s 5ms/step
> 
> #LS: penalty, then mixture
> vroom::vroom_write(output,'./outputs/mlp_predictions.csv',delim=',')
> 
> if(PARALLEL){
+   stopCluster(cl)
+ }
> 
> proc.time()
    user   system  elapsed 
2100.269 3498.349  160.347 
